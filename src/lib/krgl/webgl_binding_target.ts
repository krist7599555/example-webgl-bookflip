import { groupBy, keys, mapValues } from "lodash-es";
import { Simplify, Writable } from "type-fest";

// https://www.hacklewayne.com/typescript-convert-union-to-tuple-array-yes-but-how
type Contra<T> = T extends any ? (arg: T) => void : never;
type Cov<T> = T extends any ? () => T : never;
type InferCov<T> = [T] extends [() => infer I] ? I : never;
type InferContra<T> = [T] extends [(arg: infer I) => void] ? I : never;
type PickOne<T> = InferContra<InferContra<Contra<Contra<T>>>>;
type Union2Tuple<T> = PickOne<T> extends infer U // assign PickOne<T> to U
  ? Exclude<T, U> extends never // T and U are the same
    ? [T]
    : [...Union2Tuple<Exclude<T, U>>, U] // recursion
  : never;

const WEBGL_BINING_FUNC_TARGET = [
  { func: "bindBuffer", target: "ARRAY_BUFFER" },
  { func: "bindBuffer", target: "COPY_READ_BUFFER" },
  { func: "bindBuffer", target: "COPY_WRITE_BUFFER" },
  { func: "bindBuffer", target: "ELEMENT_ARRAY_BUFFER" },
  { func: "bindBuffer", target: "PIXEL_PACK_BUFFER" },
  { func: "bindBuffer", target: "PIXEL_UNPACK_BUFFER" },
  { func: "bindBuffer", target: "TRANSFORM_FEEDBACK_BUFFER" },
  { func: "bindBuffer", target: "UNIFORM_BUFFER" },
  { func: "bufferData", target: "ARRAY_BUFFER" },
  { func: "bufferData", target: "COPY_READ_BUFFER" },
  { func: "bufferData", target: "COPY_WRITE_BUFFER" },
  { func: "bufferData", target: "ELEMENT_ARRAY_BUFFER" },
  { func: "bufferData", target: "PIXEL_PACK_BUFFER" },
  { func: "bufferData", target: "PIXEL_UNPACK_BUFFER" },
  { func: "bufferData", target: "TRANSFORM_FEEDBACK_BUFFER" },
  { func: "bufferData", target: "UNIFORM_BUFFER" },
  { func: "bufferSubData", target: "ARRAY_BUFFER" },
  { func: "bufferSubData", target: "COPY_READ_BUFFER" },
  { func: "bufferSubData", target: "COPY_WRITE_BUFFER" },
  { func: "bufferSubData", target: "ELEMENT_ARRAY_BUFFER" },
  { func: "bufferSubData", target: "PIXEL_PACK_BUFFER" },
  { func: "bufferSubData", target: "PIXEL_UNPACK_BUFFER" },
  { func: "bufferSubData", target: "TRANSFORM_FEEDBACK_BUFFER" },
  { func: "bufferSubData", target: "UNIFORM_BUFFER" },
  { func: "copyBufferSubData", target: "ARRAY_BUFFER" },
  { func: "copyBufferSubData", target: "COPY_READ_BUFFER" },
  { func: "copyBufferSubData", target: "COPY_WRITE_BUFFER" },
  { func: "copyBufferSubData", target: "ELEMENT_ARRAY_BUFFER" },
  { func: "copyBufferSubData", target: "PIXEL_PACK_BUFFER" },
  { func: "copyBufferSubData", target: "PIXEL_UNPACK_BUFFER" },
  { func: "copyBufferSubData", target: "TRANSFORM_FEEDBACK_BUFFER" },
  { func: "copyBufferSubData", target: "UNIFORM_BUFFER" },
  { func: "getBufferParameter", target: "ARRAY_BUFFER" },
  { func: "getBufferParameter", target: "COPY_READ_BUFFER" },
  { func: "getBufferParameter", target: "COPY_WRITE_BUFFER" },
  { func: "getBufferParameter", target: "ELEMENT_ARRAY_BUFFER" },
  { func: "getBufferParameter", target: "PIXEL_PACK_BUFFER" },
  { func: "getBufferParameter", target: "PIXEL_UNPACK_BUFFER" },
  { func: "getBufferParameter", target: "TRANSFORM_FEEDBACK_BUFFER" },
  { func: "getBufferParameter", target: "UNIFORM_BUFFER" },
  { func: "vertexAttribPointer", target: "ARRAY_BUFFER" },
  { func: "drawElements", target: "ELEMENT_ARRAY_BUFFER" },
  { func: "drawElementsInstanced", target: "ELEMENT_ARRAY_BUFFER" },
  { func: "drawRangeElements", target: "ELEMENT_ARRAY_BUFFER" },
  { func: "readPixels", target: "PIXEL_PACK_BUFFER" },
  { func: "compressedTexImage2D", target: "PIXEL_UNPACK_BUFFER" },
  { func: "compressedTexImage2D", target: "TEXTURE_2D" },
  { func: "compressedTexImage3D", target: "PIXEL_UNPACK_BUFFER" },
  { func: "compressedTexImage3D", target: "TEXTURE_3D" },
  { func: "compressedTexImage3D", target: "TEXTURE_2D_ARRAY" },
  { func: "compressedTexSubImage2D", target: "PIXEL_UNPACK_BUFFER" },
  { func: "compressedTexSubImage2D", target: "TEXTURE_2D" },
  { func: "compressedTexSubImage3D", target: "PIXEL_UNPACK_BUFFER" },
  { func: "compressedTexSubImage3D", target: "TEXTURE_3D" },
  { func: "compressedTexSubImage3D", target: "TEXTURE_2D_ARRAY" },
  { func: "texImage2D", target: "PIXEL_UNPACK_BUFFER" },
  { func: "texImage2D", target: "TEXTURE_2D" },
  { func: "texImage2D", target: "TEXTURE_CUBE_MAP" },
  { func: "texImage3D", target: "PIXEL_UNPACK_BUFFER" },
  { func: "texImage3D", target: "TEXTURE_3D" },
  { func: "texImage3D", target: "TEXTURE_2D_ARRAY" },
  { func: "texSubImage2D", target: "PIXEL_UNPACK_BUFFER" },
  { func: "texSubImage2D", target: "TEXTURE_2D" },
  { func: "texSubImage3D", target: "PIXEL_UNPACK_BUFFER" },
  { func: "texSubImage3D", target: "TEXTURE_3D" },
  { func: "texSubImage3D", target: "TEXTURE_2D_ARRAY" },
  { func: "bindBufferBase", target: "TRANSFORM_FEEDBACK_BUFFER" },
  { func: "bindBufferBase", target: "UNIFORM_BUFFER" },
  { func: "bindBufferRange", target: "TRANSFORM_FEEDBACK_BUFFER" },
  { func: "bindBufferRange", target: "UNIFORM_BUFFER" },
  { func: "framebufferTexture2D", target: "GL_FRAMEBUFFER" },
  { func: "framebufferTexture2D", target: "READ_FRAMEBUFFER" },
  { func: "framebufferTexture2D", target: "DRAW_FRAMEBUFFER" },
  { func: "framebufferTexture2D", target: "TEXTURE_2D" },
  { func: "bindFramebuffer", target: "READ_FRAMEBUFFER" },
  { func: "bindFramebuffer", target: "DRAW_FRAMEBUFFER" },
  { func: "checkFramebufferStatus", target: "READ_FRAMEBUFFER" },
  { func: "checkFramebufferStatus", target: "DRAW_FRAMEBUFFER" },
  { func: "framebufferRenderbuffer", target: "READ_FRAMEBUFFER" },
  { func: "framebufferRenderbuffer", target: "DRAW_FRAMEBUFFER" },
  { func: "framebufferRenderbuffer", target: "RENDERBUFFER" },
  { func: "framebufferTextureLayer", target: "READ_FRAMEBUFFER" },
  { func: "framebufferTextureLayer", target: "DRAW_FRAMEBUFFER" },
  { func: "invalidateFramebuffer", target: "READ_FRAMEBUFFER" },
  { func: "invalidateFramebuffer", target: "DRAW_FRAMEBUFFER" },
  { func: "invalidateSubFramebuffer", target: "READ_FRAMEBUFFER" },
  { func: "invalidateSubFramebuffer", target: "DRAW_FRAMEBUFFER" },
  { func: "bindRenderbuffer", target: "RENDERBUFFER" },
  { func: "renderbufferStorage", target: "RENDERBUFFER" },
  { func: "renderbufferStorageMultisample", target: "RENDERBUFFER" },
  { func: "bindTexture", target: "TEXTURE_2D" },
  { func: "bindTexture", target: "TEXTURE_3D" },
  { func: "bindTexture", target: "TEXTURE_2D_ARRAY" },
  { func: "bindTexture", target: "TEXTURE_CUBE_MAP" },
  { func: "copyTexImage2D", target: "TEXTURE_2D" },
  { func: "copyTexSubImage2D", target: "TEXTURE_2D" },
  { func: "generateMipmap", target: "TEXTURE_2D" },
  { func: "generateMipmap", target: "TEXTURE_3D" },
  { func: "generateMipmap", target: "TEXTURE_2D_ARRAY" },
  { func: "generateMipmap", target: "TEXTURE_CUBE_MAP" },
  { func: "getTexParameter", target: "TEXTURE_2D" },
  { func: "getTexParameter", target: "TEXTURE_3D" },
  { func: "getTexParameter", target: "TEXTURE_2D_ARRAY" },
  { func: "getTexParameter", target: "TEXTURE_CUBE_MAP" },
  { func: "texStorage2D", target: "TEXTURE_2D" },
  { func: "texStorage2D", target: "TEXTURE_CUBE_MAP" },
  { func: "copyTexSubImage3D", target: "TEXTURE_3D" },
  { func: "copyTexSubImage3D", target: "TEXTURE_2D_ARRAY" },
  { func: "texStorage3D", target: "TEXTURE_3D" },
  { func: "texStorage3D", target: "TEXTURE_2D_ARRAY" },
  { func: "bindTransformFeedback", target: "TRANSFORM_FEEDBACK" },
] as const;

// WEBGL_BINING_FUNC_TARGET.reduce((o, { func, target }) => { o[func] ??= []; o[func].push(target)  }, {})
const FUNC_TO_TARGET = {
  bindBuffer: [
    "ARRAY_BUFFER",
    "COPY_READ_BUFFER",
    "COPY_WRITE_BUFFER",
    "ELEMENT_ARRAY_BUFFER",
    "PIXEL_PACK_BUFFER",
    "PIXEL_UNPACK_BUFFER",
    "TRANSFORM_FEEDBACK_BUFFER",
    "UNIFORM_BUFFER",
  ],
  bufferData: [
    "ARRAY_BUFFER",
    "COPY_READ_BUFFER",
    "COPY_WRITE_BUFFER",
    "ELEMENT_ARRAY_BUFFER",
    "PIXEL_PACK_BUFFER",
    "PIXEL_UNPACK_BUFFER",
    "TRANSFORM_FEEDBACK_BUFFER",
    "UNIFORM_BUFFER",
  ],
  bufferSubData: [
    "ARRAY_BUFFER",
    "COPY_READ_BUFFER",
    "COPY_WRITE_BUFFER",
    "ELEMENT_ARRAY_BUFFER",
    "PIXEL_PACK_BUFFER",
    "PIXEL_UNPACK_BUFFER",
    "TRANSFORM_FEEDBACK_BUFFER",
    "UNIFORM_BUFFER",
  ],
  copyBufferSubData: [
    "ARRAY_BUFFER",
    "COPY_READ_BUFFER",
    "COPY_WRITE_BUFFER",
    "ELEMENT_ARRAY_BUFFER",
    "PIXEL_PACK_BUFFER",
    "PIXEL_UNPACK_BUFFER",
    "TRANSFORM_FEEDBACK_BUFFER",
    "UNIFORM_BUFFER",
  ],
  getBufferParameter: [
    "ARRAY_BUFFER",
    "COPY_READ_BUFFER",
    "COPY_WRITE_BUFFER",
    "ELEMENT_ARRAY_BUFFER",
    "PIXEL_PACK_BUFFER",
    "PIXEL_UNPACK_BUFFER",
    "TRANSFORM_FEEDBACK_BUFFER",
    "UNIFORM_BUFFER",
  ],
  vertexAttribPointer: ["ARRAY_BUFFER"],
  drawElements: ["ELEMENT_ARRAY_BUFFER"],
  drawElementsInstanced: ["ELEMENT_ARRAY_BUFFER"],
  drawRangeElements: ["ELEMENT_ARRAY_BUFFER"],
  readPixels: ["PIXEL_PACK_BUFFER"],
  compressedTexImage2D: ["PIXEL_UNPACK_BUFFER", "TEXTURE_2D"],
  compressedTexImage3D: [
    "PIXEL_UNPACK_BUFFER",
    "TEXTURE_3D",
    "TEXTURE_2D_ARRAY",
  ],
  compressedTexSubImage2D: ["PIXEL_UNPACK_BUFFER", "TEXTURE_2D"],
  compressedTexSubImage3D: [
    "PIXEL_UNPACK_BUFFER",
    "TEXTURE_3D",
    "TEXTURE_2D_ARRAY",
  ],
  texImage2D: ["PIXEL_UNPACK_BUFFER", "TEXTURE_2D", "TEXTURE_CUBE_MAP"],
  texImage3D: ["PIXEL_UNPACK_BUFFER", "TEXTURE_3D", "TEXTURE_2D_ARRAY"],
  texSubImage2D: ["PIXEL_UNPACK_BUFFER", "TEXTURE_2D"],
  texSubImage3D: ["PIXEL_UNPACK_BUFFER", "TEXTURE_3D", "TEXTURE_2D_ARRAY"],
  bindBufferBase: ["TRANSFORM_FEEDBACK_BUFFER", "UNIFORM_BUFFER"],
  bindBufferRange: ["TRANSFORM_FEEDBACK_BUFFER", "UNIFORM_BUFFER"],
  framebufferTexture2D: [
    "GL_FRAMEBUFFER",
    "READ_FRAMEBUFFER",
    "DRAW_FRAMEBUFFER",
    "TEXTURE_2D",
  ],
  bindFramebuffer: ["READ_FRAMEBUFFER", "DRAW_FRAMEBUFFER"],
  checkFramebufferStatus: ["READ_FRAMEBUFFER", "DRAW_FRAMEBUFFER"],
  framebufferRenderbuffer: [
    "READ_FRAMEBUFFER",
    "DRAW_FRAMEBUFFER",
    "RENDERBUFFER",
  ],
  framebufferTextureLayer: ["READ_FRAMEBUFFER", "DRAW_FRAMEBUFFER"],
  invalidateFramebuffer: ["READ_FRAMEBUFFER", "DRAW_FRAMEBUFFER"],
  invalidateSubFramebuffer: ["READ_FRAMEBUFFER", "DRAW_FRAMEBUFFER"],
  bindRenderbuffer: ["RENDERBUFFER"],
  renderbufferStorage: ["RENDERBUFFER"],
  renderbufferStorageMultisample: ["RENDERBUFFER"],
  bindTexture: [
    "TEXTURE_2D",
    "TEXTURE_3D",
    "TEXTURE_2D_ARRAY",
    "TEXTURE_CUBE_MAP",
  ],
  copyTexImage2D: ["TEXTURE_2D"],
  copyTexSubImage2D: ["TEXTURE_2D"],
  generateMipmap: [
    "TEXTURE_2D",
    "TEXTURE_3D",
    "TEXTURE_2D_ARRAY",
    "TEXTURE_CUBE_MAP",
  ],
  getTexParameter: [
    "TEXTURE_2D",
    "TEXTURE_3D",
    "TEXTURE_2D_ARRAY",
    "TEXTURE_CUBE_MAP",
  ],
  texStorage2D: ["TEXTURE_2D", "TEXTURE_CUBE_MAP"],
  copyTexSubImage3D: ["TEXTURE_3D", "TEXTURE_2D_ARRAY"],
  texStorage3D: ["TEXTURE_3D", "TEXTURE_2D_ARRAY"],
  bindTransformFeedback: ["TRANSFORM_FEEDBACK"],
} as const;

// WEBGL_BINING_FUNC_TARGET.reduce((o, { func, target }) => { o[target] ??= []; o[target].push(func)  }, {})
const TARGET_TO_FUNC = {
  // custom to bins vao
  VERTEX_ARRAY: [],
  ARRAY_BUFFER: [
    "bindBuffer",
    "bufferData",
    "bufferSubData",
    "copyBufferSubData",
    "getBufferParameter",
    "vertexAttribPointer",
  ],
  COPY_READ_BUFFER: [
    "bindBuffer",
    "bufferData",
    "bufferSubData",
    "copyBufferSubData",
    "getBufferParameter",
  ],
  COPY_WRITE_BUFFER: [
    "bindBuffer",
    "bufferData",
    "bufferSubData",
    "copyBufferSubData",
    "getBufferParameter",
  ],
  ELEMENT_ARRAY_BUFFER: [
    "bindBuffer",
    "bufferData",
    "bufferSubData",
    "copyBufferSubData",
    "getBufferParameter",
    "drawElements",
    "drawElementsInstanced",
    "drawRangeElements",
  ],
  PIXEL_PACK_BUFFER: [
    "bindBuffer",
    "bufferData",
    "bufferSubData",
    "copyBufferSubData",
    "getBufferParameter",
    "readPixels",
  ],
  PIXEL_UNPACK_BUFFER: [
    "bindBuffer",
    "bufferData",
    "bufferSubData",
    "copyBufferSubData",
    "getBufferParameter",
    "compressedTexImage2D",
    "compressedTexImage3D",
    "compressedTexSubImage2D",
    "compressedTexSubImage3D",
    "texImage2D",
    "texImage3D",
    "texSubImage2D",
    "texSubImage3D",
  ],
  TRANSFORM_FEEDBACK_BUFFER: [
    "bindBuffer",
    "bufferData",
    "bufferSubData",
    "copyBufferSubData",
    "getBufferParameter",
    "bindBufferBase",
    "bindBufferRange",
  ],
  UNIFORM_BUFFER: [
    "bindBuffer",
    "bufferData",
    "bufferSubData",
    "copyBufferSubData",
    "getBufferParameter",
    "bindBufferBase",
    "bindBufferRange",
  ],
  TEXTURE_2D: [
    "compressedTexImage2D",
    "compressedTexSubImage2D",
    "texImage2D",
    "texSubImage2D",
    "framebufferTexture2D",
    "bindTexture",
    "copyTexImage2D",
    "copyTexSubImage2D",
    "generateMipmap",
    "getTexParameter",
    "texStorage2D",
  ],
  TEXTURE_3D: [
    "compressedTexImage3D",
    "compressedTexSubImage3D",
    "texImage3D",
    "texSubImage3D",
    "bindTexture",
    "generateMipmap",
    "getTexParameter",
    "copyTexSubImage3D",
    "texStorage3D",
  ],
  TEXTURE_2D_ARRAY: [
    "compressedTexImage3D",
    "compressedTexSubImage3D",
    "texImage3D",
    "texSubImage3D",
    "bindTexture",
    "generateMipmap",
    "getTexParameter",
    "copyTexSubImage3D",
    "texStorage3D",
  ],
  TEXTURE_CUBE_MAP: [
    "texImage2D",
    "bindTexture",
    "generateMipmap",
    "getTexParameter",
    "texStorage2D",
  ],
  GL_FRAMEBUFFER: ["framebufferTexture2D"],
  READ_FRAMEBUFFER: [
    "framebufferTexture2D",
    "bindFramebuffer",
    "checkFramebufferStatus",
    "framebufferRenderbuffer",
    "framebufferTextureLayer",
    "invalidateFramebuffer",
    "invalidateSubFramebuffer",
  ],
  DRAW_FRAMEBUFFER: [
    "framebufferTexture2D",
    "bindFramebuffer",
    "checkFramebufferStatus",
    "framebufferRenderbuffer",
    "framebufferTextureLayer",
    "invalidateFramebuffer",
    "invalidateSubFramebuffer",
  ],
  RENDERBUFFER: [
    "framebufferRenderbuffer",
    "bindRenderbuffer",
    "renderbufferStorage",
    "renderbufferStorageMultisample",
  ],
  TRANSFORM_FEEDBACK: ["bindTransformFeedback"],
} as const;

type B = typeof WEBGL_BINING_FUNC_TARGET[number];
type Target = B["target"];
type Func = B["func"];

const HIDEN_TARGET_FUNCTION = [
  "vertexAttribPointer",
  "drawElements",
  "drawElementsInstanced",
  "drawRangeElements",
  "readPixels",
] as const;

export function gl_target<T extends keyof typeof TARGET_TO_FUNC>(
  gl: WebGL2RenderingContext,
  t: T
): Pick<WebGL2RenderingContext, typeof TARGET_TO_FUNC[T][number]> {
  return gl;
}

export type GlTargets = keyof typeof TARGET_TO_FUNC;
export type GlFunc<Target extends keyof typeof TARGET_TO_FUNC> =
  typeof TARGET_TO_FUNC[Target][number];

const a = gl_target(null as any, "ARRAY_BUFFER");
const b = gl_target(null as any, "UNIFORM_BUFFER");
const c = gl_target(null as any, "ELEMENT_ARRAY_BUFFER");
const d: typeof a & typeof b & typeof c = null as any;
const e = gl_target(
  null as any,
  null as any as "ARRAY_BUFFER" | "UNIFORM_BUFFER" | "ELEMENT_ARRAY_BUFFER"
);

type KrGlBufferString =
  | "ARRAY_BUFFER"
  | "UNIFORM_BUFFER"
  | "ELEMENT_ARRAY_BUFFER";

const f = gl_target(null as any, null as any as KrGlBufferString);
